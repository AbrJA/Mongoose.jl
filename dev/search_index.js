var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Mongoose.MgConnection","page":"API","title":"Mongoose.MgConnection","text":"MgConnection\n\nA type alias for a pointer to a Mongoose connection. This is used to represent a connection to a client in the Mongoose server.\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoose.MgHttpHeader","page":"API","title":"Mongoose.MgHttpHeader","text":"struct MgHttpHeader\n    name::MgStr\n    val::MgStr\nend\n\nA Julia representation of Mongoose's struct mg_http_header, representing a single HTTP header.\n\nFields\n\nname::MgStr: An MgStr structure representing the header field name (e.g., \"Content-Type\").\nval::MgStr: An MgStr structure representing the header field value (e.g., \"application/json\").\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoose.MgHttpMessage","page":"API","title":"Mongoose.MgHttpMessage","text":"struct MgHttpMessage\n    method::MgStr\n    uri::MgStr\n    query::MgStr\n    proto::MgStr\n    headers::NTuple{MG_MAX_HTTP_HEADERS, MgHttpHeader}\n    body::MgStr\n    message::MgStr\nend\n\nA Julia representation of Mongoose's struct mg_http_message, containing parsed information about an HTTP request or response.\n\nFields\n\nmethod::MgStr: The HTTP method (e.g., \"GET\", \"POST\").\nuri::MgStr: The request URI (e.g., \"/api/data\").\nquery::MgStr: The query string part of the URI (e.g., \"id=123\").\nproto::MgStr: The protocol string (e.g., \"HTTP/1.1\").\nheaders::NTuple{MG_MAX_HTTP_HEADERS, MgHttpHeader}: A tuple of MgHttpHeader structs representing the HTTP headers.\nbody::MgStr: The body of the HTTP message.\nmessage::MgStr: The entire raw HTTP message.\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoose.MgStr","page":"API","title":"Mongoose.MgStr","text":"struct MgStr\n    ptr::Cstring\n    len::Csize_t\nend\n\nA Julia representation of Mongoose's struct mg_str which is a view into a string buffer. It's used to represent strings returned by Mongoose.\n\nFields\n\nptr::Cstring: A pointer to the beginning of the string data in memory.\nlen::Csize_t: The length of the string in bytes.\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoose.mg_body-Tuple{MgHttpMessage}","page":"API","title":"Mongoose.mg_body","text":"mg_body(message::MgHttpMessage) -> String\n\nExtracts the body of the HTTP message from an MgHttpMessage as a Julia String.\n\nArguments\n\nmessage::MgHttpMessage: The HTTP message object.\n\nReturns\n\nString: The body content of the HTTP message.\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_headers-Tuple{MgHttpMessage}","page":"API","title":"Mongoose.mg_headers","text":"mg_headers(message::MgHttpMessage) -> NamedTuple\n\nExtracts all HTTP headers from an MgHttpMessage into a Julia Named Tuple.\n\nArguments\n\nmessage::MgHttpMessage: The HTTP message object.\n\nReturns\n\nNamedTuple: A dictionary where keys are header names and values are header values.\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_http_reply-Tuple{Ptr{Nothing}, Int64, String, String}","page":"API","title":"Mongoose.mg_http_reply","text":"mg_http_reply(conn::MgConnection, status::Int, headers::String, body::String)::Cvoid\n\nSends an HTTP reply to a connected client. It constructs and sends an HTTP response including the status code, headers, and body.\n\nArguments\n\nconn::MgConnection: A pointer to the Mongoose connection to which the reply should be sent.\nstatus::Int: The HTTP status code (e.g., 200 for OK, 404 for Not Found).\nheaders::String: A string containing HTTP headers, separated by \\r\\n. For example: \"Content-Type: text/plain\\r\\nCustom-Header: value\\r\\n\".\nbody::String: The body of the HTTP response.\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_json_reply-Tuple{Ptr{Nothing}, Int64, String}","page":"API","title":"Mongoose.mg_json_reply","text":"mg_json_reply(conn::MgConnection, status::Int, body::String)\n\nThis is a convenience function that calls mg_http_reply with the Content-Type header set to application/json.\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_message-Tuple{MgHttpMessage}","page":"API","title":"Mongoose.mg_message","text":"mg_message(message::MgHttpMessage) -> String\n\nExtracts the entire raw HTTP message from an MgHttpMessage as a Julia String.\n\nArguments\n\nmessage::MgHttpMessage: The HTTP message object.\n\nReturns\n\nString: The complete raw HTTP message string.\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_method-Tuple{MgHttpMessage}","page":"API","title":"Mongoose.mg_method","text":"mg_method(message::MgHttpMessage) -> String\n\nExtracts the HTTP method from an MgHttpMessage as a Julia String.\n\nArguments\n\nmessage::MgHttpMessage: The HTTP message object.\n\nReturns\n\nString: The HTTP method (e.g., \"GET\", \"POST\").\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_proto-Tuple{MgHttpMessage}","page":"API","title":"Mongoose.mg_proto","text":"mg_proto(message::MgHttpMessage) -> String\n\nExtracts the protocol string from an MgHttpMessage as a Julia String.\n\nArguments\n\nmessage::MgHttpMessage: The HTTP message object.\n\nReturns\n\nString: The protocol string (e.g., \"HTTP/1.1\").\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_query-Tuple{MgHttpMessage}","page":"API","title":"Mongoose.mg_query","text":"mg_query(message::MgHttpMessage) -> String\n\nExtracts the query string from an MgHttpMessage as a Julia String.\n\nArguments\n\nmessage::MgHttpMessage: The HTTP message object.\n\nReturns\n\nString: The query string (e.g., \"param=value&id=1\").\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_register!-Tuple{AbstractString, AbstractString, Function}","page":"API","title":"Mongoose.mg_register!","text":"mg_register!(method::Symbol, uri::AbstractString, handler::Function)\n\nRegisters an HTTP request handler for a specific method and URI.\n\nArguments\n\nmethod::AbstractString: The HTTP method (e.g., GET, POST, PUT, PATCH, DELETE).\nuri::AbstractString: The URI path to register the handler for (e.g., \"/api/users\").\nhandler::Function: The Julia function to be called when a matching request arrives.\n\nThis function should accept two arguments: (conn::MgConnection, message::MgHttpMessage; kwargs...).\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_serve!-Tuple{}","page":"API","title":"Mongoose.mg_serve!","text":"mg_serve!(host::AbstractString=\"127.0.0.1\", port::Integer=8080)::Nothing\n\nStarts the Mongoose HTTP server. Initialize the Mongoose manager, binds an HTTP listener, and starts a background Task to poll the Mongoose event loop.\n\nArguments\n\nhost::AbstractString=\"127.0.0.1\": The IP address or hostname to listen on. Defaults to \"127.0.0.1\" (localhost).\nport::Integer=8080: The port number to listen on. Defaults to 8080.\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_shutdown!-Tuple{}","page":"API","title":"Mongoose.mg_shutdown!","text":"mg_shutdown!()::Nothing\n\nStops the running Mongoose HTTP server. Sets a flag to stop the background event loop task, and then frees the Mongoose associated resources.\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_text_reply-Tuple{Ptr{Nothing}, Int64, String}","page":"API","title":"Mongoose.mg_text_reply","text":"mg_text_reply(conn::MgConnection, status::Int, body::String)\n\nThis is a convenience function that calls mg_http_reply with the Content-Type header set to text/plain.\n\n\n\n\n\n","category":"method"},{"location":"api/#Mongoose.mg_uri-Tuple{MgHttpMessage}","page":"API","title":"Mongoose.mg_uri","text":"mg_uri(message::MgHttpMessage) -> String\n\nExtracts the URI from an MgHttpMessage as a Julia String.\n\nArguments\n\nmessage::MgHttpMessage: The HTTP message object.\n\nReturns\n\nString: The request URI (e.g., \"/api/users\").\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Loading the library","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mongoose","category":"page"},{"location":"examples/#GET-endpoint-with-query-params","page":"Examples","title":"GET endpoint with query params","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"function greet(conn; kwargs...)\n    query = mg_query(kwargs[:message])\n    matches = match(r\"name=([^&]*)\", query)\n    if !isnothing(matches)\n        return mg_text_reply(conn, 200, \"Hi $(matches.captures[1])\")\n    else\n        return mg_text_reply(conn, 200, \"Hi unknown person\")\n    end\nend\n\nmg_register!(\"GET\", \"/greet\", greet)","category":"page"},{"location":"examples/#POST-endpoint-with-body","page":"Examples","title":"POST endpoint with body","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using JSON\n\nfunction saygoodbye(conn; kwargs...)\n    body = mg_body(kwargs[:message])\n    dict = JSON.parse(body)\n    json = Dict(\"message\" => dict[\"name\"]) |> JSON.json\n    return mg_json_reply(conn, 200, json)\nend\n\nmg_register!(\"POST\", \"/saygoodbye\", saygoodbye)","category":"page"},{"location":"examples/#Start-server","page":"Examples","title":"Start server","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"mg_serve!()","category":"page"},{"location":"examples/#End-server","page":"Examples","title":"End server","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"mg_shutdown!()","category":"page"},{"location":"#Mongoose.jl","page":"Introduction","title":"Mongoose.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Mongoose.jl is a Julia package that provides a lightweight and efficient interface for building HTTP servers and web applications. It leverages the Mongoose C library to deliver fast, embeddable web server capabilities directly from Julia code. The package is designed for simplicity and ease of use. With Mongoose.jl, users can define routes, handle HTTP requests, and serve dynamic or static content with minimal setup.","category":"page"},{"location":"#Instalation","page":"Introduction","title":"Instalation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"] add Mongoose","category":"page"},{"location":"#Quick-start","page":"Introduction","title":"Quick start","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Important: The handler functions always should have two arguments conn::MgConnection and request::MgHttpMessage","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Mongoose\n\nfunction test_json(conn; kwargs...)\n    mg_json_reply(conn, 200, \"{\\\"message\\\":\\\"Hi JSON!\\\"}\")\nend\n\nfunction test_text(conn; kwargs...)\n    mg_text_reply(conn, 200, \"Hi TEXT!\")\nend\n\nmg_register!(\"GET\", \"/json\", test_json)\nmg_register!(\"GET\", \"/text\", test_text)\n\nmg_serve!()\nmg_shutdown!()","category":"page"},{"location":"#Examples","page":"Introduction","title":"Examples","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"More comprehensive examples demonstrating various use cases and features can be found on the Examples page.","category":"page"},{"location":"#API","page":"Introduction","title":"API","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The full API documentation, including all functions and types, is available on the API page.","category":"page"},{"location":"#Contributing","page":"Introduction","title":"Contributing","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Contributions are welcome! Please see the Contributing page for guidelines.","category":"page"},{"location":"#License","page":"Introduction","title":"License","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is distributed under the GPL-2 License.","category":"page"}]
}
